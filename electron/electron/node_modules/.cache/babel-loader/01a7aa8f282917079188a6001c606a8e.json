{"ast":null,"code":"var _classCallCheck = require(\"/Users/garybutton/Personal/iron/priv/iron/electron/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/garybutton/Personal/iron/priv/iron/electron/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n// vim: ts=4:sw=4:expandtab\nvar ProtocolAddress =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  _createClass(ProtocolAddress, null, [{\n    key: \"from\",\n    value: function from(encodedAddress) {\n      if (typeof encodedAddress !== 'string' || !encodedAddress.match(/.*\\.\\d+/)) {\n        throw new Error('Invalid address encoding');\n      }\n\n      var parts = encodedAddress.split('.');\n      return new this(parts[0], parseInt(parts[1]));\n    }\n  }]);\n\n  function ProtocolAddress(id, deviceId) {\n    _classCallCheck(this, ProtocolAddress);\n\n    if (typeof id !== 'string') {\n      throw new TypeError('id required for addr');\n    }\n\n    if (id.indexOf('.') !== -1) {\n      throw new TypeError('encoded addr detected');\n    }\n\n    this.id = id;\n\n    if (typeof deviceId !== 'number') {\n      throw new TypeError('number required for deviceId');\n    }\n\n    this.deviceId = deviceId;\n  }\n\n  _createClass(ProtocolAddress, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.id, \".\").concat(this.deviceId);\n    }\n  }, {\n    key: \"is\",\n    value: function is(other) {\n      if (!(other instanceof ProtocolAddress)) {\n        return false;\n      }\n\n      return other.id === this.id && other.deviceId === this.deviceId;\n    }\n  }]);\n\n  return ProtocolAddress;\n}();\n\nmodule.exports = ProtocolAddress;","map":null,"metadata":{},"sourceType":"script"}