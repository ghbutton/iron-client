{"ast":null,"code":"var _toConsumableArray = require(\"/Users/garybutton/Personal/iron/priv/iron/electron/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar Presence = {\n  syncState: function syncState(currentState, newState, onJoin, onLeave) {\n    var _this = this;\n\n    var state = this.clone(currentState);\n    var joins = {};\n    var leaves = {};\n    this.map(state, function (key, presence) {\n      if (!newState[key]) {\n        leaves[key] = presence;\n      }\n    });\n    this.map(newState, function (key, newPresence) {\n      var currentPresence = state[key];\n\n      if (currentPresence) {\n        var newRefs = newPresence.metas.map(function (m) {\n          return m.phx_ref;\n        });\n        var curRefs = currentPresence.metas.map(function (m) {\n          return m.phx_ref;\n        });\n        var joinedMetas = newPresence.metas.filter(function (m) {\n          return curRefs.indexOf(m.phx_ref) < 0;\n        });\n        var leftMetas = currentPresence.metas.filter(function (m) {\n          return newRefs.indexOf(m.phx_ref) < 0;\n        });\n\n        if (joinedMetas.length > 0) {\n          joins[key] = newPresence;\n          joins[key].metas = joinedMetas;\n        }\n\n        if (leftMetas.length > 0) {\n          leaves[key] = _this.clone(currentPresence);\n          leaves[key].metas = leftMetas;\n        }\n      } else {\n        joins[key] = newPresence;\n      }\n    });\n    return this.syncDiff(state, {\n      joins: joins,\n      leaves: leaves\n    }, onJoin, onLeave);\n  },\n  syncDiff: function syncDiff(currentState, _ref, onJoin, onLeave) {\n    var joins = _ref.joins,\n        leaves = _ref.leaves;\n    var state = this.clone(currentState);\n\n    if (!onJoin) {\n      onJoin = function onJoin() {};\n    }\n\n    if (!onLeave) {\n      onLeave = function onLeave() {};\n    }\n\n    this.map(joins, function (key, newPresence) {\n      var currentPresence = state[key];\n      state[key] = newPresence;\n\n      if (currentPresence) {\n        var _state$key$metas;\n\n        (_state$key$metas = state[key].metas).unshift.apply(_state$key$metas, _toConsumableArray(currentPresence.metas));\n      }\n\n      onJoin(key, currentPresence, newPresence);\n    });\n    this.map(leaves, function (key, leftPresence) {\n      var currentPresence = state[key];\n\n      if (!currentPresence) {\n        return;\n      }\n\n      var refsToRemove = leftPresence.metas.map(function (m) {\n        return m.phx_ref;\n      });\n      currentPresence.metas = currentPresence.metas.filter(function (p) {\n        return refsToRemove.indexOf(p.phx_ref) < 0;\n      });\n      onLeave(key, currentPresence, leftPresence);\n\n      if (currentPresence.metas.length === 0) {\n        delete state[key];\n      }\n    });\n    return state;\n  },\n  list: function list(presences, chooser) {\n    if (!chooser) {\n      chooser = function chooser(key, pres) {\n        return pres;\n      };\n    }\n\n    return this.map(presences, function (key, presence) {\n      return chooser(key, presence);\n    });\n  },\n  // private\n  map: function map(obj, func) {\n    return Object.getOwnPropertyNames(obj).map(function (key) {\n      return func(key, obj[key]);\n    });\n  },\n  clone: function clone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n};\nmodule.exports = Presence;","map":null,"metadata":{},"sourceType":"script"}