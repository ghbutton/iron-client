{"ast":null,"code":"'use strict';\n\nvar curve25519 = require('../src/curve25519_wrapper');\n\nvar nodeCrypto = require('crypto');\n\nfunction validatePrivKey(privKey) {\n  if (privKey === undefined) {\n    throw new Error(\"Undefined private key\");\n  }\n\n  if (!(privKey instanceof Buffer)) {\n    throw new Error(\"Invalid private key type: \".concat(privKey.constructor.name));\n  }\n\n  if (privKey.byteLength != 32) {\n    throw new Error(\"Incorrect private key length: \".concat(privKey.byteLength));\n  }\n}\n\nfunction scrubPubKeyFormat(pubKey) {\n  if (!(pubKey instanceof Buffer)) {\n    throw new Error(\"Invalid public key type: \".concat(pubKey.constructor.name));\n  }\n\n  if (pubKey === undefined || (pubKey.byteLength != 33 || pubKey[0] != 5) && pubKey.byteLength != 32) {\n    throw new Error(\"Invalid public key\");\n  }\n\n  if (pubKey.byteLength == 33) {\n    return pubKey.slice(1);\n  } else {\n    console.error(\"WARNING: Expected pubkey of length 33, please report the ST and client that generated the pubkey\");\n    return pubKey;\n  }\n}\n\nexports.createKeyPair = function (privKey) {\n  validatePrivKey(privKey);\n  var keys = curve25519.keyPair(privKey); // prepend version byte\n\n  var origPub = new Uint8Array(keys.pubKey);\n  var pub = new Uint8Array(33);\n  pub.set(origPub, 1);\n  pub[0] = 5;\n  return {\n    pubKey: Buffer.from(pub),\n    privKey: Buffer.from(keys.privKey)\n  };\n};\n\nexports.calculateAgreement = function (pubKey, privKey) {\n  pubKey = scrubPubKeyFormat(pubKey);\n  validatePrivKey(privKey);\n\n  if (!pubKey || pubKey.byteLength != 32) {\n    throw new Error(\"Invalid public key\");\n  }\n\n  return Buffer.from(curve25519.sharedSecret(pubKey, privKey));\n};\n\nexports.calculateSignature = function (privKey, message) {\n  validatePrivKey(privKey);\n\n  if (!message) {\n    throw new Error(\"Invalid message\");\n  }\n\n  return Buffer.from(curve25519.sign(privKey, message));\n};\n\nexports.verifySignature = function (pubKey, msg, sig) {\n  pubKey = scrubPubKeyFormat(pubKey);\n\n  if (!pubKey || pubKey.byteLength != 32) {\n    throw new Error(\"Invalid public key\");\n  }\n\n  if (!msg) {\n    throw new Error(\"Invalid message\");\n  }\n\n  if (!sig || sig.byteLength != 64) {\n    throw new Error(\"Invalid signature\");\n  }\n\n  return curve25519.verify(pubKey, msg, sig);\n};\n\nexports.generateKeyPair = function () {\n  var privKey = nodeCrypto.randomBytes(32);\n  return exports.createKeyPair(privKey);\n};","map":null,"metadata":{},"sourceType":"script"}