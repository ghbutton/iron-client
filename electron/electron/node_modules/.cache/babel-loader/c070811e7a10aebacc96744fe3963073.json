{"ast":null,"code":"\"use strict\";\n\nimport _slicedToArray from \"/Users/garybutton/Personal/iron/priv/iron/electron/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/garybutton/Personal/iron/priv/iron/electron/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/garybutton/Personal/iron/priv/iron/electron/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nconsole.log(\"Loading controller\");\n\nrequire('./custom/config.js');\n\nvar util = require('./custom/util.js');\n\nvar _require = require('phoenix-channels'),\n    Socket = _require.Socket;\n\nvar _require2 = require('libsignal'),\n    libsignal = _require2.libsignal;\n\nfunction _connected(connection, user, userId) {\n  return connection.relationships.users.data[0].id == userId && connection.relationships.users.data[1].id == user.id || connection.relationships.users.data[1].id == userId && connection.relationships.users.data[0].id == user.id;\n}\n\nfunction _sleep(_x) {\n  return _sleep2.apply(this, arguments);\n}\n\nfunction _sleep2() {\n  _sleep2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee29(milliseconds) {\n    return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n      while (1) {\n        switch (_context29.prev = _context29.next) {\n          case 0:\n            return _context29.abrupt(\"return\", new Promise(function (resolve) {\n              return setTimeout(resolve, milliseconds);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context29.stop();\n        }\n      }\n    }, _callee29, this);\n  }));\n  return _sleep2.apply(this, arguments);\n}\n\nfunction _sendApiPush(_x2, _x3, _x4) {\n  return _sendApiPush2.apply(this, arguments);\n}\n\nfunction _sendApiPush2() {\n  _sendApiPush2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee30(apiChannel, event, options) {\n    var ready, results, response;\n    return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n      while (1) {\n        switch (_context30.prev = _context30.next) {\n          case 0:\n            ready = false, results = null;\n            response = apiChannel.push(event, options).receive(\"ok\", function (pushResults) {\n              results = pushResults;\n              ready = true;\n            });\n\n          case 2:\n            if (!true) {\n              _context30.next = 11;\n              break;\n            }\n\n            if (!ready) {\n              _context30.next = 7;\n              break;\n            }\n\n            return _context30.abrupt(\"break\", 11);\n\n          case 7:\n            _context30.next = 9;\n            return _sleep(10);\n\n          case 9:\n            _context30.next = 2;\n            break;\n\n          case 11:\n            return _context30.abrupt(\"return\", results);\n\n          case 12:\n          case \"end\":\n            return _context30.stop();\n        }\n      }\n    }, _callee30, this);\n  }));\n  return _sendApiPush2.apply(this, arguments);\n}\n\nfunction _normalizeLocalMessage(_x5, _x6, _x7, _x8) {\n  return _normalizeLocalMessage2.apply(this, arguments);\n}\n\nfunction _normalizeLocalMessage2() {\n  _normalizeLocalMessage2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee31(messageString, userId, recipientUserId, deviceId) {\n    var object;\n    return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n      while (1) {\n        switch (_context31.prev = _context31.next) {\n          case 0:\n            object = {\n              \"type\": \"m\",\n              \"version\": \"1\",\n              \"data\": messageString\n            };\n            return _context31.abrupt(\"return\", {\n              id: uuidv4(),\n              // Client generated id\n              attributes: {\n                decryptedBody: object\n              },\n              relationships: {\n                sender: {\n                  data: {\n                    type: \"user\",\n                    id: userId\n                  }\n                },\n                receiver: {\n                  data: {\n                    type: \"user\",\n                    id: recipientUserId\n                  }\n                }\n              }\n            });\n\n          case 2:\n          case \"end\":\n            return _context31.stop();\n        }\n      }\n    }, _callee31, this);\n  }));\n  return _normalizeLocalMessage2.apply(this, arguments);\n}\n\nfunction _encryptMessage(_x9, _x10, _x11) {\n  return _encryptMessage2.apply(this, arguments);\n}\n\nfunction _encryptMessage2() {\n  _encryptMessage2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee32(store, address, messageString) {\n    var object, messageBuffer, sessionCipher, message;\n    return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n      while (1) {\n        switch (_context32.prev = _context32.next) {\n          case 0:\n            object = JSON.stringify({\n              \"type\": \"m\",\n              \"version\": \"1\",\n              \"data\": messageString\n            });\n            messageBuffer = util.toArrayBuffer(object);\n            sessionCipher = new libsignal.SessionCipher(store, address);\n            _context32.next = 5;\n            return sessionCipher.encrypt(messageBuffer);\n\n          case 5:\n            message = _context32.sent;\n            return _context32.abrupt(\"return\", message);\n\n          case 7:\n          case \"end\":\n            return _context32.stop();\n        }\n      }\n    }, _callee32, this);\n  }));\n  return _encryptMessage2.apply(this, arguments);\n}\n\nfunction _addressToSessionKey(_x12, _x13) {\n  return _addressToSessionKey2.apply(this, arguments);\n}\n\nfunction _addressToSessionKey2() {\n  _addressToSessionKey2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee33(addressString, deviceId) {\n    return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n      while (1) {\n        switch (_context33.prev = _context33.next) {\n          case 0:\n            return _context33.abrupt(\"return\", \"session\".concat(addressString, \".\").concat(deviceId));\n\n          case 1:\n          case \"end\":\n            return _context33.stop();\n        }\n      }\n    }, _callee33, this);\n  }));\n  return _addressToSessionKey2.apply(this, arguments);\n}\n\nfunction _storeHasSession(_x14, _x15, _x16) {\n  return _storeHasSession2.apply(this, arguments);\n} // Application.get_env(:iron, :javascript)[:logging]\n\n\nfunction _storeHasSession2() {\n  _storeHasSession2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee34(store, addressString, deviceId) {\n    return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n      while (1) {\n        switch (_context34.prev = _context34.next) {\n          case 0:\n            _context34.next = 2;\n            return _addressToSessionKey(addressString, deviceId);\n\n          case 2:\n            _context34.t0 = _context34.sent;\n            _context34.t1 = store.store;\n            return _context34.abrupt(\"return\", _context34.t0 in _context34.t1);\n\n          case 5:\n          case \"end\":\n            return _context34.stop();\n        }\n      }\n    }, _callee34, this);\n  }));\n  return _storeHasSession2.apply(this, arguments);\n}\n\nvar logging = true;\n\nvar logger = function () {\n  return {\n    info: function info(value) {\n      if (logging) {\n        console.log(value);\n      }\n    },\n    error: function error(value) {\n      console.log(\"ERROR: \" + value);\n    }\n  };\n}();\n\nfunction _randomInteger() {\n  return _randomInteger2.apply(this, arguments);\n}\n\nfunction _randomInteger2() {\n  _randomInteger2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee35() {\n    return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n      while (1) {\n        switch (_context35.prev = _context35.next) {\n          case 0:\n            return _context35.abrupt(\"return\", Math.floor(Math.random() * 1000000));\n\n          case 1:\n          case \"end\":\n            return _context35.stop();\n        }\n      }\n    }, _callee35, this);\n  }));\n  return _randomInteger2.apply(this, arguments);\n}\n\nfunction _nullOrUndefined(_x17) {\n  return _nullOrUndefined2.apply(this, arguments);\n}\n\nfunction _nullOrUndefined2() {\n  _nullOrUndefined2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee36(value) {\n    return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n      while (1) {\n        switch (_context36.prev = _context36.next) {\n          case 0:\n            return _context36.abrupt(\"return\", value === undefined || value === null);\n\n          case 1:\n          case \"end\":\n            return _context36.stop();\n        }\n      }\n    }, _callee36, this);\n  }));\n  return _nullOrUndefined2.apply(this, arguments);\n}\n\nfunction _initMessages(_x18) {\n  return _initMessages2.apply(this, arguments);\n}\n\nfunction _initMessages2() {\n  _initMessages2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee37(userId) {\n    var key, messagesPayload;\n    return _regeneratorRuntime.wrap(function _callee37$(_context37) {\n      while (1) {\n        switch (_context37.prev = _context37.next) {\n          case 0:\n            key = \"ironMessages_\".concat(userId);\n            messagesPayload = window.localStorage.getItem(key);\n            _context37.next = 4;\n            return _nullOrUndefined(messagesPayload);\n\n          case 4:\n            if (!_context37.sent) {\n              _context37.next = 8;\n              break;\n            }\n\n            return _context37.abrupt(\"return\", []);\n\n          case 8:\n            return _context37.abrupt(\"return\", JSON.parse(messagesPayload));\n\n          case 9:\n          case \"end\":\n            return _context37.stop();\n        }\n      }\n    }, _callee37, this);\n  }));\n  return _initMessages2.apply(this, arguments);\n}\n\nfunction _initState(_x19) {\n  return _initState2.apply(this, arguments);\n}\n\nfunction _initState2() {\n  _initState2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee38(userId) {\n    var key, deviceInfoPayload, messages, registrationId, deviceId, keyId, store, bundle, deviceInfo, payload, _registrationId, _deviceId, _keyId, _store, _bundle, _arr, _i, _key, _arr2, _i2, _key2;\n\n    return _regeneratorRuntime.wrap(function _callee38$(_context38) {\n      while (1) {\n        switch (_context38.prev = _context38.next) {\n          case 0:\n            key = \"ironDeviceInfo_\".concat(userId);\n            deviceInfoPayload = window.localStorage.getItem(key);\n            _context38.next = 4;\n            return _initMessages(userId);\n\n          case 4:\n            messages = _context38.sent;\n            _context38.next = 7;\n            return _nullOrUndefined(deviceInfoPayload);\n\n          case 7:\n            if (!_context38.sent) {\n              _context38.next = 24;\n              break;\n            }\n\n            registrationId = KeyHelper.generateRegistrationId();\n            _context38.next = 11;\n            return _randomInteger();\n\n          case 11:\n            deviceId = _context38.sent;\n            keyId = 1; // should be random?\n\n            store = new SignalProtocolStore();\n            _context38.next = 16;\n            return generateIdentity(store);\n\n          case 16:\n            logger.info(\"Generate pre key bundle\");\n            _context38.next = 19;\n            return generatePreKeyBundle(store, keyId, keyId);\n\n          case 19:\n            bundle = _context38.sent;\n            logger.info(bundle);\n            return _context38.abrupt(\"return\", [registrationId, deviceId, keyId, store, messages, bundle]);\n\n          case 24:\n            deviceInfo = JSON.parse(deviceInfoPayload);\n            _context38.t0 = deviceInfo.version;\n            _context38.next = _context38.t0 === 1 ? 28 : 45;\n            break;\n\n          case 28:\n            payload = deviceInfo.payload;\n            _registrationId = payload.registrationId;\n            _deviceId = payload.deviceId;\n            _keyId = payload.preKeyId;\n            _store = new SignalProtocolStore();\n\n            _store.put(\"registrationId\", payload.registrationId);\n\n            _store.put(\"identityKey\", {\n              pubKey: util.toArrayBuffer(payload.idPubKey),\n              privKey: util.toArrayBuffer(payload.idPrivKey)\n            });\n\n            _store.storePreKey(_keyId, {\n              pubKey: util.toArrayBuffer(payload.preKeyPub),\n              privKey: util.toArrayBuffer(payload.preKeyPriv)\n            });\n\n            _store.storeSignedPreKey(_keyId, {\n              pubKey: util.toArrayBuffer(payload.signedPreKeyPub),\n              privKey: util.toArrayBuffer(payload.signedPreKeyPriv)\n            });\n\n            _context38.next = 39;\n            return getPreKeyBundle(_store, _keyId, _keyId, util.toArrayBuffer(payload.signedSignature));\n\n          case 39:\n            _bundle = _context38.sent;\n            // restore the saved sessions\n            _arr = Object.keys(payload.sessions);\n\n            for (_i = 0; _i < _arr.length; _i++) {\n              _key = _arr[_i];\n\n              _store.put(_key, payload.sessions[_key]);\n            } // restore the identity keys\n\n\n            _arr2 = Object.keys(payload.identityKeys);\n\n            for (_i2 = 0; _i2 < _arr2.length; _i2++) {\n              _key2 = _arr2[_i2];\n\n              _store.put(_key2, payload.identityKeys[_key2]);\n            }\n\n            return _context38.abrupt(\"return\", [_registrationId, _deviceId, _keyId, _store, messages, _bundle]);\n\n          case 45:\n          case \"end\":\n            return _context38.stop();\n        }\n      }\n    }, _callee38, this);\n  }));\n  return _initState2.apply(this, arguments);\n}\n\nfunction _savePreKeyBundleToAPI(_x20, _x21) {\n  return _savePreKeyBundleToAPI2.apply(this, arguments);\n}\n\nfunction _savePreKeyBundleToAPI2() {\n  _savePreKeyBundleToAPI2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee39(bundle, apiChannel) {\n    var payload;\n    return _regeneratorRuntime.wrap(function _callee39$(_context39) {\n      while (1) {\n        switch (_context39.prev = _context39.next) {\n          case 0:\n            logger.info(bundle);\n            payload = {\n              \"payload\": {\n                \"data\": {\n                  \"type\": \"pre_key_bundle\",\n                  \"attributes\": {\n                    \"identity_key\": util.toString(bundle.identityKey),\n                    \"registration_id\": bundle.registrationId,\n                    \"pre_key_id\": bundle.preKey.keyId,\n                    \"pre_key_public_key\": util.toString(bundle.preKey.publicKey || \"\"),\n                    // The public pre key gets wiped out after decoding a message, not sure why...\n                    \"signed_pre_key_id\": bundle.signedPreKey.keyId,\n                    \"signed_pre_key_public_key\": util.toString(bundle.signedPreKey.publicKey),\n                    \"signed_pre_key_signature\": util.toString(bundle.signedPreKey.signature)\n                  }\n                }\n              }\n            };\n            return _context39.abrupt(\"return\", _sendApiPush(apiChannel, \"POST:pre_key_bundles\", payload));\n\n          case 3:\n          case \"end\":\n            return _context39.stop();\n        }\n      }\n    }, _callee39, this);\n  }));\n  return _savePreKeyBundleToAPI2.apply(this, arguments);\n}\n\nfunction _createNewInvitation(_x22, _x23, _x24) {\n  return _createNewInvitation2.apply(this, arguments);\n}\n\nfunction _createNewInvitation2() {\n  _createNewInvitation2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee40(apiChannel, name, email) {\n    var payload;\n    return _regeneratorRuntime.wrap(function _callee40$(_context40) {\n      while (1) {\n        switch (_context40.prev = _context40.next) {\n          case 0:\n            payload = {\n              \"payload\": {\n                \"data\": {\n                  \"type\": \"invitation\",\n                  \"attributes\": {\n                    \"name\": name,\n                    \"email\": email\n                  }\n                }\n              }\n            };\n            return _context40.abrupt(\"return\", _sendApiPush(apiChannel, \"POST:invitations\", payload));\n\n          case 2:\n          case \"end\":\n            return _context40.stop();\n        }\n      }\n    }, _callee40, this);\n  }));\n  return _createNewInvitation2.apply(this, arguments);\n}\n\nfunction _sendMessage(_x25, _x26, _x27, _x28) {\n  return _sendMessage2.apply(this, arguments);\n}\n\nfunction _sendMessage2() {\n  _sendMessage2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee41(message, apiChannel, preKeyBundle, devicePreKeyBundle) {\n    var payload;\n    return _regeneratorRuntime.wrap(function _callee41$(_context41) {\n      while (1) {\n        switch (_context41.prev = _context41.next) {\n          case 0:\n            payload = {\n              \"payload\": {\n                \"data\": {\n                  \"type\": \"message\",\n                  \"attributes\": {\n                    \"type\": message.type,\n                    \"body\": message.body,\n                    \"pre_key_bundle_id\": preKeyBundle.id,\n                    \"sender_pre_key_bundle_id\": devicePreKeyBundle.id\n                  }\n                }\n              }\n            };\n            return _context41.abrupt(\"return\", _sendApiPush(apiChannel, \"POST:messages\", payload));\n\n          case 2:\n          case \"end\":\n            return _context41.stop();\n        }\n      }\n    }, _callee41, this);\n  }));\n  return _sendMessage2.apply(this, arguments);\n}\n\nfunction _addressString(_x29, _x30) {\n  return _addressString2.apply(this, arguments);\n}\n\nfunction _addressString2() {\n  _addressString2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee42(userId, deviceId) {\n    return _regeneratorRuntime.wrap(function _callee42$(_context42) {\n      while (1) {\n        switch (_context42.prev = _context42.next) {\n          case 0:\n            return _context42.abrupt(\"return\", \"\".concat(userId, \"_\").concat(deviceId));\n\n          case 1:\n          case \"end\":\n            return _context42.stop();\n        }\n      }\n    }, _callee42, this);\n  }));\n  return _addressString2.apply(this, arguments);\n}\n\nfunction _searchIncludes(_x31, _x32) {\n  return _searchIncludes2.apply(this, arguments);\n}\n\nfunction _searchIncludes2() {\n  _searchIncludes2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee43(baseString, searchString) {\n    return _regeneratorRuntime.wrap(function _callee43$(_context43) {\n      while (1) {\n        switch (_context43.prev = _context43.next) {\n          case 0:\n            baseString = baseString || \"\";\n            baseString = baseString.toLowerCase();\n            return _context43.abrupt(\"return\", baseString.includes(searchString));\n\n          case 3:\n          case \"end\":\n            return _context43.stop();\n        }\n      }\n    }, _callee43, this);\n  }));\n  return _searchIncludes2.apply(this, arguments);\n}\n\nfunction _decryptMessage(_x33, _x34, _x35, _x36) {\n  return _decryptMessage2.apply(this, arguments);\n}\n\nfunction _decryptMessage2() {\n  _decryptMessage2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee44(store, deviceId, userId, payload) {\n    var addressString, address, sessionCipher, hasSession, encryptedMessage, message;\n    return _regeneratorRuntime.wrap(function _callee44$(_context44) {\n      while (1) {\n        switch (_context44.prev = _context44.next) {\n          case 0:\n            _context44.next = 2;\n            return _addressString(userId, deviceId);\n\n          case 2:\n            addressString = _context44.sent;\n            address = new libsignal.SignalProtocolAddress(addressString, deviceId);\n            sessionCipher = new libsignal.SessionCipher(store, address);\n            _context44.next = 7;\n            return _storeHasSession(store, addressString);\n\n          case 7:\n            hasSession = _context44.sent;\n            encryptedMessage = payload.data[0].attributes;\n            message = null;\n            logger.info(\"Encrypted message body \".concat(encryptedMessage.body));\n\n            if (!(encryptedMessage.type == 3)) {\n              _context44.next = 17;\n              break;\n            }\n\n            _context44.next = 14;\n            return sessionCipher.decryptPreKeyWhisperMessage(encryptedMessage.body, \"binary\");\n\n          case 14:\n            message = _context44.sent;\n            _context44.next = 20;\n            break;\n\n          case 17:\n            _context44.next = 19;\n            return sessionCipher.decryptWhisperMessage(encryptedMessage.body, \"binary\");\n\n          case 19:\n            message = _context44.sent;\n\n          case 20:\n            return _context44.abrupt(\"return\", JSON.parse(util.toString(message)));\n\n          case 21:\n          case \"end\":\n            return _context44.stop();\n        }\n      }\n    }, _callee44, this);\n  }));\n  return _decryptMessage2.apply(this, arguments);\n}\n\nfunction _displayMessageInUI() {\n  return _displayMessageInUI2.apply(this, arguments);\n}\n\nfunction _displayMessageInUI2() {\n  _displayMessageInUI2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee45() {\n    return _regeneratorRuntime.wrap(function _callee45$(_context45) {\n      while (1) {\n        switch (_context45.prev = _context45.next) {\n          case 0:\n            window.apiCallbacks.newMessage();\n\n          case 1:\n          case \"end\":\n            return _context45.stop();\n        }\n      }\n    }, _callee45, this);\n  }));\n  return _displayMessageInUI2.apply(this, arguments);\n}\n\nfunction _saveMessagesToMemory(_x37, _x38) {\n  return _saveMessagesToMemory2.apply(this, arguments);\n}\n\nfunction _saveMessagesToMemory2() {\n  _saveMessagesToMemory2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee46(userId, messages) {\n    var key;\n    return _regeneratorRuntime.wrap(function _callee46$(_context46) {\n      while (1) {\n        switch (_context46.prev = _context46.next) {\n          case 0:\n            key = \"ironMessages_\".concat(userId);\n            window.localStorage.setItem(key, JSON.stringify(messages));\n\n          case 2:\n          case \"end\":\n            return _context46.stop();\n        }\n      }\n    }, _callee46, this);\n  }));\n  return _saveMessagesToMemory2.apply(this, arguments);\n}\n\nfunction _saveSessionToMemory(_x39) {\n  return _saveSessionToMemory2.apply(this, arguments);\n}\n\nfunction _saveSessionToMemory2() {\n  _saveSessionToMemory2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee47(session) {\n    var key;\n    return _regeneratorRuntime.wrap(function _callee47$(_context47) {\n      while (1) {\n        switch (_context47.prev = _context47.next) {\n          case 0:\n            key = \"ironUserSession\";\n            window.localStorage.setItem(key, JSON.stringify(session));\n\n          case 2:\n          case \"end\":\n            return _context47.stop();\n        }\n      }\n    }, _callee47, this);\n  }));\n  return _saveSessionToMemory2.apply(this, arguments);\n}\n\nfunction _initUserSession() {\n  return _initUserSession2.apply(this, arguments);\n}\n\nfunction _initUserSession2() {\n  _initUserSession2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee48() {\n    var key, sessionPayload, session;\n    return _regeneratorRuntime.wrap(function _callee48$(_context48) {\n      while (1) {\n        switch (_context48.prev = _context48.next) {\n          case 0:\n            key = \"ironUserSession\";\n            sessionPayload = window.localStorage.getItem(key);\n\n            if (!sessionPayload) {\n              _context48.next = 7;\n              break;\n            }\n\n            session = JSON.parse(sessionPayload);\n            return _context48.abrupt(\"return\", [session.relationships.user.data.id, session.attributes.token]);\n\n          case 7:\n            return _context48.abrupt(\"return\", [null, null]);\n\n          case 8:\n          case \"end\":\n            return _context48.stop();\n        }\n      }\n    }, _callee48, this);\n  }));\n  return _initUserSession2.apply(this, arguments);\n}\n\nfunction _saveStateToMemory(_x40, _x41, _x42, _x43, _x44) {\n  return _saveStateToMemory2.apply(this, arguments);\n}\n\nfunction _saveStateToMemory2() {\n  _saveStateToMemory2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee49(store, bundle, keyId, deviceId, userId) {\n    var registrationId, idKeyPair, preKeyPair, signedPreKeyPair, sig, sessions, identityKeys, _arr3, _i3, _key3, storagePayload, ironStorage, key;\n\n    return _regeneratorRuntime.wrap(function _callee49$(_context49) {\n      while (1) {\n        switch (_context49.prev = _context49.next) {\n          case 0:\n            _context49.next = 2;\n            return store.getLocalRegistrationId();\n\n          case 2:\n            registrationId = _context49.sent;\n            _context49.next = 5;\n            return store.getIdentityKeyPair();\n\n          case 5:\n            idKeyPair = _context49.sent;\n            _context49.next = 8;\n            return store.loadPreKey(keyId);\n\n          case 8:\n            preKeyPair = _context49.sent;\n            _context49.next = 11;\n            return store.loadSignedPreKey(keyId);\n\n          case 11:\n            signedPreKeyPair = _context49.sent;\n            _context49.next = 14;\n            return bundle.signedPreKey.signature;\n\n          case 14:\n            sig = _context49.sent;\n            sessions = {};\n            identityKeys = {};\n            _arr3 = Object.keys(store.store);\n\n            for (_i3 = 0; _i3 < _arr3.length; _i3++) {\n              _key3 = _arr3[_i3];\n\n              // save the current sessions\n              if (_key3.startsWith(\"session\")) {\n                sessions[_key3] = store.store[_key3];\n              } // save the current identity keys\n\n\n              if (_key3.startsWith(\"identityKey\") && _key3 != \"identityKey\") {\n                identityKeys[_key3] = store.store[_key3];\n              }\n            }\n\n            _context49.t0 = registrationId;\n            _context49.t1 = util.toString(idKeyPair.pubKey);\n            _context49.t2 = util.toString(idKeyPair.privKey);\n            _context49.t3 = keyId;\n            _context49.t4 = keyId;\n            _context49.t5 = deviceId;\n            _context49.next = 27;\n            return _addressString(userId, deviceId);\n\n          case 27:\n            _context49.t6 = _context49.sent;\n            _context49.t7 = util.toString(signedPreKeyPair.pubKey);\n            _context49.t8 = util.toString(signedPreKeyPair.privKey);\n            _context49.t9 = util.toString(sig);\n            _context49.t10 = sessions;\n            _context49.t11 = identityKeys;\n            storagePayload = {\n              registrationId: _context49.t0,\n              idPubKey: _context49.t1,\n              idPrivKey: _context49.t2,\n              preKeyId: _context49.t3,\n              signedKeyId: _context49.t4,\n              deviceId: _context49.t5,\n              addressString: _context49.t6,\n              signedPreKeyPub: _context49.t7,\n              signedPreKeyPriv: _context49.t8,\n              signedSignature: _context49.t9,\n              sessions: _context49.t10,\n              identityKeys: _context49.t11\n            };\n\n            if (preKeyPair && preKeyPair.pubKey) {\n              storagePayload.preKeyPub = util.toString(preKeyPair.pubKey);\n              storagePayload.preKeyPriv = util.toString(preKeyPair.privKey);\n            }\n\n            ironStorage = {\n              version: 1,\n              payload: storagePayload\n            };\n            key = \"ironDeviceInfo_\".concat(userId);\n            window.localStorage.setItem(key, JSON.stringify(ironStorage));\n\n          case 38:\n          case \"end\":\n            return _context49.stop();\n        }\n      }\n    }, _callee49, this);\n  }));\n  return _saveStateToMemory2.apply(this, arguments);\n}\n\nvar Controller = function () {\n  var userId = null,\n      userSessionToken = null;\n  var applicationState = {\n    state: {\n      connectedUsers: [],\n      messages: []\n    },\n    insertObject: function insertObject(key, value) {\n      applicationState.state[\"\".concat(key, \"_\").concat(value.id)] = value;\n      var all = applicationState.state[\"\".concat(key)] || new Set([]);\n      applicationState.state[\"\".concat(key)] = all.add(value);\n    },\n    connectedUser: function () {\n      var _connectedUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(user) {\n        var connections;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                connections = Array.from(applicationState.state[\"connections\"] || new Set([]));\n\n                if (connections.some(function (connection) {\n                  return _connected(connection, user, userId);\n                })) {\n                  applicationState.state.connectedUsers.push(user);\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function connectedUser(_x45) {\n        return _connectedUser.apply(this, arguments);\n      };\n    }()\n  };\n  window.applicationState = applicationState;\n  var clientVersion = \"0.0.1\";\n  var _ref = [null, null, null, null, null, null],\n      registrationId = _ref[0],\n      deviceId = _ref[1],\n      keyId = _ref[2],\n      bundle = _ref[3],\n      devicePreKeyBundle = _ref[4];\n  var socket = null,\n      apiChannel = null,\n      userDeviceChannel = null,\n      loginChannel = null; // Need to store on disk or something\n\n  var store = null,\n      messages = null;\n  var apiChannelReady = false,\n      userDeviceChannelReady = false,\n      loginChannelReady = false;\n  var failedToJoin = false;\n\n  function _waitForApiChannel() {\n    return _waitForApiChannel2.apply(this, arguments);\n  }\n\n  function _waitForApiChannel2() {\n    _waitForApiChannel2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee27() {\n      return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              if (!true) {\n                _context27.next = 9;\n                break;\n              }\n\n              if (!(apiChannelReady || failedToJoin)) {\n                _context27.next = 5;\n                break;\n              }\n\n              return _context27.abrupt(\"break\", 9);\n\n            case 5:\n              _context27.next = 7;\n              return _sleep(10);\n\n            case 7:\n              _context27.next = 0;\n              break;\n\n            case 9:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, _callee27, this);\n    }));\n    return _waitForApiChannel2.apply(this, arguments);\n  }\n\n  function _waitForLoginChannel() {\n    return _waitForLoginChannel2.apply(this, arguments);\n  }\n\n  function _waitForLoginChannel2() {\n    _waitForLoginChannel2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee28() {\n      return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              if (!true) {\n                _context28.next = 9;\n                break;\n              }\n\n              if (!(loginChannelReady || failedToJoin)) {\n                _context28.next = 5;\n                break;\n              }\n\n              return _context28.abrupt(\"break\", 9);\n\n            case 5:\n              _context28.next = 7;\n              return _sleep(10);\n\n            case 7:\n              _context28.next = 0;\n              break;\n\n            case 9:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, _callee28, this);\n    }));\n    return _waitForLoginChannel2.apply(this, arguments);\n  }\n\n  return {\n    asyncCall: function () {\n      var _asyncCall = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _ref2, _ref3;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                logger.info(\"Init\");\n                _context2.next = 3;\n                return _initUserSession();\n\n              case 3:\n                _ref2 = _context2.sent;\n                _ref3 = _slicedToArray(_ref2, 2);\n                userId = _ref3[0];\n                userSessionToken = _ref3[1];\n                _context2.next = 9;\n                return this.connectToServer();\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function asyncCall() {\n        return _asyncCall.apply(this, arguments);\n      };\n    }(),\n    inspectStore: function () {\n      var _inspectStore = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", store);\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function inspectStore() {\n        return _inspectStore.apply(this, arguments);\n      };\n    }(),\n    connectToAnonymous: function () {\n      var _connectToAnonymous = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function connectToAnonymous() {\n        return _connectToAnonymous.apply(this, arguments);\n      };\n    }(),\n    connectToServer: function () {\n      var _connectToServer = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee12() {\n        var _this = this;\n\n        var _ref4, _ref5, url;\n\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                logger.info(\"Connecting to server\");\n                _context12.next = 3;\n                return _initState(userId);\n\n              case 3:\n                _ref4 = _context12.sent;\n                _ref5 = _slicedToArray(_ref4, 6);\n                registrationId = _ref5[0];\n                deviceId = _ref5[1];\n                keyId = _ref5[2];\n                store = _ref5[3];\n                messages = _ref5[4];\n                bundle = _ref5[5];\n                logger.info(\"Device id \".concat(deviceId));\n                url = \"\".concat(wsProtocol, \"://\").concat(wsUrl);\n\n                if (Number.isInteger(wsPort)) {\n                  url = url + \":\".concat(wsPort);\n                }\n\n                url = url + \"/socket\";\n                socket = new Socket(url, {\n                  params: {\n                    userId: userId,\n                    sessionToken: userSessionToken,\n                    clientVersion: clientVersion,\n                    deviceId: deviceId\n                  }\n                });\n                userDeviceChannel = socket.channel(\"user:device:connect:\".concat(userId, \":\").concat(deviceId), {});\n                apiChannel = socket.channel(\"api:connect\", {});\n                socket.connect();\n                apiChannel.join().receive(\"ok\",\n                /*#__PURE__*/\n                function () {\n                  var _ref6 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee7(resp) {\n                    var response;\n                    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                      while (1) {\n                        switch (_context7.prev = _context7.next) {\n                          case 0:\n                            logger.info(\"Joined successfully\", resp);\n                            logger.info(\"GET:pre_key_bundles\");\n                            _context7.next = 4;\n                            return _saveStateToMemory(store, bundle, keyId, deviceId, userId);\n\n                          case 4:\n                            _context7.next = 6;\n                            return _savePreKeyBundleToAPI(bundle, apiChannel);\n\n                          case 6:\n                            response = _context7.sent;\n                            devicePreKeyBundle = response.payload.data[0];\n                            apiChannelReady = true;\n                            userDeviceChannel.join().receive(\"ok\",\n                            /*#__PURE__*/\n                            function () {\n                              var _ref7 = _asyncToGenerator(\n                              /*#__PURE__*/\n                              _regeneratorRuntime.mark(function _callee5(resp) {\n                                return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                                  while (1) {\n                                    switch (_context5.prev = _context5.next) {\n                                      case 0:\n                                        logger.info(\"Joined successfully\", resp);\n                                        userDeviceChannelReady = true;\n\n                                      case 2:\n                                      case \"end\":\n                                        return _context5.stop();\n                                    }\n                                  }\n                                }, _callee5, this);\n                              }));\n\n                              return function (_x47) {\n                                return _ref7.apply(this, arguments);\n                              };\n                            }()).receive(\"error\",\n                            /*#__PURE__*/\n                            function () {\n                              var _ref8 = _asyncToGenerator(\n                              /*#__PURE__*/\n                              _regeneratorRuntime.mark(function _callee6(resp) {\n                                return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                                  while (1) {\n                                    switch (_context6.prev = _context6.next) {\n                                      case 0:\n                                        logger.info(\"Unable to join user\", resp);\n                                        failedToJoin = true;\n\n                                      case 2:\n                                      case \"end\":\n                                        return _context6.stop();\n                                    }\n                                  }\n                                }, _callee6, this);\n                              }));\n\n                              return function (_x48) {\n                                return _ref8.apply(this, arguments);\n                              };\n                            }());\n\n                          case 10:\n                          case \"end\":\n                            return _context7.stop();\n                        }\n                      }\n                    }, _callee7, this);\n                  }));\n\n                  return function (_x46) {\n                    return _ref6.apply(this, arguments);\n                  };\n                }()).receive(\"error\",\n                /*#__PURE__*/\n                function () {\n                  var _ref9 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee8(resp) {\n                    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                      while (1) {\n                        switch (_context8.prev = _context8.next) {\n                          case 0:\n                            logger.info(\"Unable to join api\", resp);\n                            failedToJoin = true;\n\n                          case 2:\n                          case \"end\":\n                            return _context8.stop();\n                        }\n                      }\n                    }, _callee8, this);\n                  }));\n\n                  return function (_x49) {\n                    return _ref9.apply(this, arguments);\n                  };\n                }());\n                loginChannel = socket.channel(\"login:connect\", {});\n                loginChannel.join().receive(\"ok\",\n                /*#__PURE__*/\n                function () {\n                  var _ref10 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee9(resp) {\n                    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n                      while (1) {\n                        switch (_context9.prev = _context9.next) {\n                          case 0:\n                            logger.info(\"Login joined successfully\", resp);\n                            loginChannelReady = true;\n\n                          case 2:\n                          case \"end\":\n                            return _context9.stop();\n                        }\n                      }\n                    }, _callee9, this);\n                  }));\n\n                  return function (_x50) {\n                    return _ref10.apply(this, arguments);\n                  };\n                }()).receive(\"error\",\n                /*#__PURE__*/\n                function () {\n                  var _ref11 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee10(resp) {\n                    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n                      while (1) {\n                        switch (_context10.prev = _context10.next) {\n                          case 0:\n                            logger.info(\"Unable to join\", resp);\n\n                          case 1:\n                          case \"end\":\n                            return _context10.stop();\n                        }\n                      }\n                    }, _callee10, this);\n                  }));\n\n                  return function (_x51) {\n                    return _ref11.apply(this, arguments);\n                  };\n                }());\n                userDeviceChannel.on(\"POST:messages\",\n                /*#__PURE__*/\n                function () {\n                  var _ref12 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee11(response) {\n                    var encryptedMessage, preKeyBundleId, senderPreKeyBundle, senderDeviceId, senderUserId, message;\n                    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n                      while (1) {\n                        switch (_context11.prev = _context11.next) {\n                          case 0:\n                            encryptedMessage = response.payload.data[0];\n                            preKeyBundleId = encryptedMessage.relationships.sender_pre_key_bundle.data.id;\n                            logger.info(\"Got a message from \".concat(preKeyBundleId));\n                            _context11.next = 5;\n                            return _this.getPreKeyBundlesById(preKeyBundleId);\n\n                          case 5:\n                            senderPreKeyBundle = _context11.sent;\n                            senderDeviceId = senderPreKeyBundle.attributes.device_id;\n                            senderUserId = senderPreKeyBundle.relationships.user.data.id;\n                            logger.info(\"Got a message from device: \".concat(senderDeviceId, \" user: \").concat(senderUserId));\n                            _context11.next = 11;\n                            return _decryptMessage(store, senderDeviceId, senderUserId, response.payload);\n\n                          case 11:\n                            message = _context11.sent;\n                            delete encryptedMessage.attributes.body;\n                            encryptedMessage.attributes.decryptedBody = message;\n                            logger.info(\"Decrypted message\");\n                            logger.info(encryptedMessage);\n                            _context11.next = 18;\n                            return _saveStateToMemory(store, bundle, keyId, deviceId, userId);\n\n                          case 18:\n                            messages.push(encryptedMessage);\n                            _context11.next = 21;\n                            return _saveMessagesToMemory(userId, messages);\n\n                          case 21:\n                            _context11.next = 23;\n                            return _displayMessageInUI();\n\n                          case 23:\n                          case \"end\":\n                            return _context11.stop();\n                        }\n                      }\n                    }, _callee11, this);\n                  }));\n\n                  return function (_x52) {\n                    return _ref12.apply(this, arguments);\n                  };\n                }());\n\n              case 23:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function connectToServer() {\n        return _connectToServer.apply(this, arguments);\n      };\n    }(),\n    getMessages: function () {\n      var _getMessages = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee13(connectedUserId) {\n        var connectedMessages, i, senderId, receiverId;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                connectedMessages = [];\n\n                for (i = 0; i < messages.length; i++) {\n                  senderId = messages[i].relationships.sender.data.id;\n                  receiverId = messages[i].relationships.receiver.data.id;\n\n                  if (senderId === connectedUserId.toString() || senderId === userId.toString() && receiverId === connectedUserId.toString()) {\n                    connectedMessages.push(messages[i]);\n                  }\n                }\n\n                return _context13.abrupt(\"return\", connectedMessages);\n\n              case 3:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function getMessages(_x53) {\n        return _getMessages.apply(this, arguments);\n      };\n    }(),\n    currentUsersMessage: function currentUsersMessage(message) {\n      return message.relationships.sender.data.id === userId.toString();\n    },\n    currentUser: function () {\n      var _currentUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee14(message) {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.notLoggedIn();\n\n              case 2:\n                if (!_context14.sent) {\n                  _context14.next = 6;\n                  break;\n                }\n\n                return _context14.abrupt(\"return\", null);\n\n              case 6:\n                return _context14.abrupt(\"return\", this.getUserById(userId));\n\n              case 7:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function currentUser(_x54) {\n        return _currentUser.apply(this, arguments);\n      };\n    }(),\n    notLoggedIn: function () {\n      var _notLoggedIn = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee15() {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return _waitForApiChannel();\n\n              case 2:\n                return _context15.abrupt(\"return\", !!socket && failedToJoin);\n\n              case 3:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      return function notLoggedIn() {\n        return _notLoggedIn.apply(this, arguments);\n      };\n    }(),\n    getUserById: function () {\n      var _getUserById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee16(userId) {\n        var usersResp, user;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return _waitForApiChannel();\n\n              case 2:\n                _context16.next = 4;\n                return _sendApiPush(apiChannel, \"GET:users\", {\n                  id: userId\n                });\n\n              case 4:\n                usersResp = _context16.sent;\n                user = usersResp.payload.data[0];\n                applicationState.insertObject(\"users\", user);\n                applicationState.connectedUser(user);\n                return _context16.abrupt(\"return\", user);\n\n              case 9:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      return function getUserById(_x55) {\n        return _getUserById.apply(this, arguments);\n      };\n    }(),\n    updateUser: function () {\n      var _updateUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee17(_ref13) {\n        var name, payload, updateResp;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                name = _ref13.name;\n                _context17.next = 3;\n                return _waitForApiChannel();\n\n              case 3:\n                payload = {\n                  payload: {\n                    data: {\n                      type: \"user\",\n                      attributes: {\n                        name: name\n                      }\n                    }\n                  }\n                };\n                _context17.next = 6;\n                return _sendApiPush(apiChannel, \"PATCH:users:\".concat(userId), payload);\n\n              case 6:\n                updateResp = _context17.sent;\n                return _context17.abrupt(\"return\", updateResp);\n\n              case 8:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      return function updateUser(_x56) {\n        return _updateUser.apply(this, arguments);\n      };\n    }(),\n    getPreKeyBundlesByUserId: function () {\n      var _getPreKeyBundlesByUserId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee18(userId) {\n        var preKeyBundlesResp;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return _waitForApiChannel();\n\n              case 2:\n                _context18.next = 4;\n                return _sendApiPush(apiChannel, \"GET:pre_key_bundles\", {\n                  \"user_id\": userId\n                });\n\n              case 4:\n                preKeyBundlesResp = _context18.sent;\n                return _context18.abrupt(\"return\", preKeyBundlesResp.payload.data);\n\n              case 6:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      return function getPreKeyBundlesByUserId(_x57) {\n        return _getPreKeyBundlesByUserId.apply(this, arguments);\n      };\n    }(),\n    getPreKeyBundlesById: function () {\n      var _getPreKeyBundlesById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee19(id) {\n        var preKeyBundlesResp;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return _waitForApiChannel();\n\n              case 2:\n                _context19.next = 4;\n                return _sendApiPush(apiChannel, \"GET:pre_key_bundles\", {\n                  \"id\": id\n                });\n\n              case 4:\n                preKeyBundlesResp = _context19.sent;\n                return _context19.abrupt(\"return\", preKeyBundlesResp.payload.data[0]);\n\n              case 6:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      return function getPreKeyBundlesById(_x58) {\n        return _getPreKeyBundlesById.apply(this, arguments);\n      };\n    }(),\n    sendVerificationCode: function () {\n      var _sendVerificationCode = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee20(email) {\n        var verificationResp;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return _waitForLoginChannel();\n\n              case 2:\n                _context20.next = 4;\n                return _sendApiPush(loginChannel, \"POST:email_verifications\", {\n                  email: email\n                });\n\n              case 4:\n                verificationResp = _context20.sent;\n                return _context20.abrupt(\"return\", verificationResp);\n\n              case 6:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      return function sendVerificationCode(_x59) {\n        return _sendVerificationCode.apply(this, arguments);\n      };\n    }(),\n    login: function () {\n      var _login = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee21(email, code) {\n        var loginResp;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return _waitForLoginChannel();\n\n              case 2:\n                _context21.next = 4;\n                return _sendApiPush(loginChannel, \"POST:sessions\", {\n                  email: email,\n                  code: code\n                });\n\n              case 4:\n                loginResp = _context21.sent;\n\n                if (loginResp.payload) {\n                  _saveSessionToMemory(loginResp.payload.data.sessions[0]);\n                }\n\n                return _context21.abrupt(\"return\", loginResp);\n\n              case 7:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      return function login(_x60, _x61) {\n        return _login.apply(this, arguments);\n      };\n    }(),\n    getConnectedUsers: function () {\n      var _getConnectedUsers = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee23() {\n        var connectionsResp, connectedUsers;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _context23.next = 2;\n                return _waitForApiChannel();\n\n              case 2:\n                _context23.next = 4;\n                return _sendApiPush(apiChannel, \"GET:connections\", {});\n\n              case 4:\n                connectionsResp = _context23.sent;\n                _context23.next = 7;\n                return Promise.all(connectionsResp.payload.data.map(\n                /*#__PURE__*/\n                function () {\n                  var _ref14 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee22(connection) {\n                    var connectedUserId, usersResp, usersById;\n                    return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n                      while (1) {\n                        switch (_context22.prev = _context22.next) {\n                          case 0:\n                            applicationState.insertObject(\"connections\", connection);\n                            connectedUserId = connection.relationships.users.data[0].id == userId ? connection.relationships.users.data[1].id : connection.relationships.users.data[0].id;\n                            _context22.next = 4;\n                            return _sendApiPush(apiChannel, \"GET:users\", {\n                              \"id\": connectedUserId\n                            });\n\n                          case 4:\n                            usersResp = _context22.sent;\n                            _context22.next = 7;\n                            return Promise.all(usersResp.payload.data.map(function (user) {\n                              applicationState.insertObject(\"users\", user);\n                              applicationState.connectedUser(user);\n                              return user;\n                            }));\n\n                          case 7:\n                            usersById = _context22.sent;\n                            return _context22.abrupt(\"return\", usersById[0]);\n\n                          case 9:\n                          case \"end\":\n                            return _context22.stop();\n                        }\n                      }\n                    }, _callee22, this);\n                  }));\n\n                  return function (_x62) {\n                    return _ref14.apply(this, arguments);\n                  };\n                }()));\n\n              case 7:\n                connectedUsers = _context23.sent;\n                return _context23.abrupt(\"return\", connectedUsers);\n\n              case 9:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      return function getConnectedUsers() {\n        return _getConnectedUsers.apply(this, arguments);\n      };\n    }(),\n    connectedUsersSearch: function () {\n      var _connectedUsersSearch = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee24(searchString) {\n        var connectedUsers, searchResults, i, user;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this.getConnectedUsers();\n\n              case 2:\n                connectedUsers = _context24.sent;\n                searchString = searchString.toLowerCase();\n                searchString = searchString.replace(/\\s+/g, \"\");\n                searchResults = [];\n                i = 0;\n\n              case 7:\n                if (!(i < connectedUsers.length)) {\n                  _context24.next = 21;\n                  break;\n                }\n\n                user = connectedUsers[i];\n                _context24.next = 11;\n                return _searchIncludes(user.attributes.name, searchString);\n\n              case 11:\n                _context24.t0 = _context24.sent;\n\n                if (_context24.t0) {\n                  _context24.next = 16;\n                  break;\n                }\n\n                _context24.next = 15;\n                return _searchIncludes(user.attributes.email, searchString);\n\n              case 15:\n                _context24.t0 = _context24.sent;\n\n              case 16:\n                if (!_context24.t0) {\n                  _context24.next = 18;\n                  break;\n                }\n\n                searchResults.push(user);\n\n              case 18:\n                i++;\n                _context24.next = 7;\n                break;\n\n              case 21:\n                return _context24.abrupt(\"return\", searchResults);\n\n              case 22:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      return function connectedUsersSearch(_x63) {\n        return _connectedUsersSearch.apply(this, arguments);\n      };\n    }(),\n    createNewInvitation: function () {\n      var _createNewInvitation3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee25(name, email) {\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                return _context25.abrupt(\"return\", _createNewInvitation(apiChannel, name, email));\n\n              case 1:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      return function createNewInvitation(_x64, _x65) {\n        return _createNewInvitation3.apply(this, arguments);\n      };\n    }(),\n    sendMessage: function () {\n      var _sendMessage3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee26(messageString, recipientUserId) {\n        var object, messageBuffer, preKeyBundles, localMessage, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, preKeyBundle, bundleDeviceId, addressString, address, sessionBuilder, result, message;\n\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                logger.info(\"Sending message \".concat(messageString, \" to \").concat(recipientUserId));\n                object = JSON.stringify({\n                  \"type\": \"message\",\n                  \"version\": \"1\",\n                  \"data\": messageString\n                });\n                messageBuffer = util.toArrayBuffer(object);\n                _context26.next = 5;\n                return this.getPreKeyBundlesByUserId(recipientUserId);\n\n              case 5:\n                preKeyBundles = _context26.sent;\n                _context26.next = 8;\n                return _normalizeLocalMessage(messageString, userId, recipientUserId, deviceId);\n\n              case 8:\n                localMessage = _context26.sent;\n                messages.push(localMessage);\n                _context26.next = 12;\n                return _saveMessagesToMemory(userId, messages);\n\n              case 12:\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context26.prev = 15;\n                _iterator = preKeyBundles[Symbol.iterator]();\n\n              case 17:\n                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                  _context26.next = 43;\n                  break;\n                }\n\n                preKeyBundle = _step.value;\n                bundleDeviceId = preKeyBundle.attributes.device_id;\n                _context26.next = 22;\n                return _addressString(recipientUserId, bundleDeviceId);\n\n              case 22:\n                addressString = _context26.sent;\n                address = new libsignal.SignalProtocolAddress(addressString, bundleDeviceId);\n                _context26.next = 26;\n                return _storeHasSession(store, addressString, bundleDeviceId);\n\n              case 26:\n                if (_context26.sent) {\n                  _context26.next = 33;\n                  break;\n                }\n\n                sessionBuilder = new libsignal.SessionBuilder(store, address);\n                _context26.next = 30;\n                return sessionBuilder.processPreKey({\n                  registrationId: preKeyBundle.attributes.registration_id,\n                  identityKey: util.toArrayBuffer(preKeyBundle.attributes.identity_key),\n                  signedPreKey: {\n                    keyId: preKeyBundle.attributes.signed_pre_key_id,\n                    publicKey: util.toArrayBuffer(preKeyBundle.attributes.signed_pre_key_public_key),\n                    signature: util.toArrayBuffer(preKeyBundle.attributes.signed_pre_key_signature)\n                  },\n                  preKey: {\n                    keyId: preKeyBundle.attributes.pre_key_id,\n                    publicKey: util.toArrayBuffer(preKeyBundle.attributes.pre_key_public_key)\n                  }\n                });\n\n              case 30:\n                result = _context26.sent;\n                _context26.next = 33;\n                return _saveStateToMemory(store, bundle, keyId, deviceId, userId);\n\n              case 33:\n                _context26.next = 35;\n                return _encryptMessage(store, address, messageString);\n\n              case 35:\n                message = _context26.sent;\n                _context26.next = 38;\n                return _saveStateToMemory(store, bundle, keyId, deviceId, userId);\n\n              case 38:\n                _context26.next = 40;\n                return _sendMessage(message, apiChannel, preKeyBundle, devicePreKeyBundle);\n\n              case 40:\n                _iteratorNormalCompletion = true;\n                _context26.next = 17;\n                break;\n\n              case 43:\n                _context26.next = 49;\n                break;\n\n              case 45:\n                _context26.prev = 45;\n                _context26.t0 = _context26[\"catch\"](15);\n                _didIteratorError = true;\n                _iteratorError = _context26.t0;\n\n              case 49:\n                _context26.prev = 49;\n                _context26.prev = 50;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 52:\n                _context26.prev = 52;\n\n                if (!_didIteratorError) {\n                  _context26.next = 55;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 55:\n                return _context26.finish(52);\n\n              case 56:\n                return _context26.finish(49);\n\n              case 57:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this, [[15, 45, 49, 57], [50,, 52, 56]]);\n      }));\n\n      return function sendMessage(_x66, _x67) {\n        return _sendMessage3.apply(this, arguments);\n      };\n    }()\n  };\n}();\n\nmodule.exports.Controller = Controller;","map":{"version":3,"sources":["/Users/garybutton/Personal/iron/priv/iron/electron/src/common/Controller.js"],"names":["console","log","require","util","Socket","libsignal","_connected","connection","user","userId","relationships","users","data","id","_sleep","milliseconds","Promise","resolve","setTimeout","_sendApiPush","apiChannel","event","options","ready","results","response","push","receive","pushResults","_normalizeLocalMessage","messageString","recipientUserId","deviceId","object","uuidv4","attributes","decryptedBody","sender","type","receiver","_encryptMessage","store","address","JSON","stringify","messageBuffer","toArrayBuffer","sessionCipher","SessionCipher","encrypt","message","_addressToSessionKey","addressString","_storeHasSession","logging","logger","info","value","error","_randomInteger","Math","floor","random","_nullOrUndefined","undefined","_initMessages","key","messagesPayload","window","localStorage","getItem","parse","_initState","deviceInfoPayload","messages","registrationId","KeyHelper","generateRegistrationId","keyId","SignalProtocolStore","generateIdentity","generatePreKeyBundle","bundle","deviceInfo","version","payload","preKeyId","put","pubKey","idPubKey","privKey","idPrivKey","storePreKey","preKeyPub","preKeyPriv","storeSignedPreKey","signedPreKeyPub","signedPreKeyPriv","getPreKeyBundle","signedSignature","Object","keys","sessions","identityKeys","_savePreKeyBundleToAPI","toString","identityKey","preKey","publicKey","signedPreKey","signature","_createNewInvitation","name","email","_sendMessage","preKeyBundle","devicePreKeyBundle","body","_addressString","_searchIncludes","baseString","searchString","toLowerCase","includes","_decryptMessage","SignalProtocolAddress","hasSession","encryptedMessage","decryptPreKeyWhisperMessage","decryptWhisperMessage","_displayMessageInUI","apiCallbacks","newMessage","_saveMessagesToMemory","setItem","_saveSessionToMemory","session","_initUserSession","sessionPayload","token","_saveStateToMemory","getLocalRegistrationId","getIdentityKeyPair","idKeyPair","loadPreKey","preKeyPair","loadSignedPreKey","signedPreKeyPair","sig","startsWith","storagePayload","signedKeyId","ironStorage","Controller","userSessionToken","applicationState","state","connectedUsers","insertObject","all","Set","add","connectedUser","connections","Array","from","some","clientVersion","socket","userDeviceChannel","loginChannel","apiChannelReady","userDeviceChannelReady","loginChannelReady","failedToJoin","_waitForApiChannel","_waitForLoginChannel","asyncCall","connectToServer","inspectStore","connectToAnonymous","url","wsProtocol","wsUrl","Number","isInteger","wsPort","params","sessionToken","channel","connect","join","resp","on","preKeyBundleId","sender_pre_key_bundle","getPreKeyBundlesById","senderPreKeyBundle","senderDeviceId","device_id","senderUserId","getMessages","connectedUserId","connectedMessages","i","length","senderId","receiverId","currentUsersMessage","currentUser","notLoggedIn","getUserById","usersResp","updateUser","updateResp","getPreKeyBundlesByUserId","preKeyBundlesResp","sendVerificationCode","verificationResp","login","code","loginResp","getConnectedUsers","connectionsResp","map","usersById","connectedUsersSearch","replace","searchResults","createNewInvitation","sendMessage","preKeyBundles","localMessage","bundleDeviceId","sessionBuilder","SessionBuilder","processPreKey","registration_id","identity_key","signed_pre_key_id","signed_pre_key_public_key","signed_pre_key_signature","pre_key_id","pre_key_public_key","result","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconsole.log(\"Loading controller\");\n\nrequire('./custom/config.js');\nconst util = require('./custom/util.js');\nconst { Socket } = require('phoenix-channels')\nconst { libsignal } = require('libsignal')\n\nfunction _connected(connection, user, userId){\n  return (connection.relationships.users.data[0].id == userId && connection.relationships.users.data[1].id == user.id) || (connection.relationships.users.data[1].id == userId && connection.relationships.users.data[0].id == user.id)\n}\n\nasync function _sleep(milliseconds) {\n  return new Promise(resolve => setTimeout(resolve, milliseconds))\n}\n\nasync function _sendApiPush(apiChannel, event, options) {\n  let [ready, results] = [false, null];\n\n  const response = apiChannel.push(event, options).receive(\"ok\", pushResults => {\n    results = pushResults;\n    ready = true;\n  });\n\n  while(true) {\n    if (ready) {\n      break;\n    } else {\n      await _sleep(10);\n    }\n  }\n\n  return results;\n}\n\nasync function _normalizeLocalMessage(messageString, userId, recipientUserId, deviceId) {\n  let object = {\"type\": \"m\", \"version\": \"1\", \"data\": messageString};\n  return {\n    id: uuidv4(),  // Client generated id\n    attributes: {\n      decryptedBody: object\n    },\n    relationships: {\n      sender: {\n        data: {\n          type: \"user\",\n          id: userId\n        }\n      },\n      receiver: {\n        data: {\n          type: \"user\",\n          id: recipientUserId\n        }\n      }\n    }\n  }\n}\n\nasync function _encryptMessage(store, address, messageString) {\n  let object = JSON.stringify({\"type\": \"m\", \"version\": \"1\", \"data\": messageString});\n  let messageBuffer = util.toArrayBuffer(object);\n\n  let sessionCipher = new libsignal.SessionCipher(store, address);\n  let message = await sessionCipher.encrypt(messageBuffer);\n  return message;\n}\n\nasync function _addressToSessionKey(addressString, deviceId) {\n  return `session${addressString}.${deviceId}`\n}\n\nasync function _storeHasSession(store, addressString, deviceId) {\n  return (await _addressToSessionKey(addressString, deviceId) in store.store)\n}\n\n\n// Application.get_env(:iron, :javascript)[:logging]\nconst logging = true\nvar logger = (function() {\n  return {\n    info: function(value) {\n      if(logging){\n        console.log(value);\n      }\n    },\n    error: function(value) {\n      console.log(\"ERROR: \" + value);\n    }\n  }\n})();\n\nasync function _randomInteger(){\n  return Math.floor(Math.random() * 1000000);\n}\nasync function _nullOrUndefined(value){\n  return value === undefined || value === null;\n}\n\nasync function _initMessages(userId) {\n  const key = `ironMessages_${userId}`;\n  const messagesPayload = window.localStorage.getItem(key);\n  if (await _nullOrUndefined(messagesPayload)) {\n    return [];\n  } else {\n    return JSON.parse(messagesPayload);\n  }\n}\n\nasync function _initState(userId){\n  const key = `ironDeviceInfo_${userId}`;\n  const deviceInfoPayload = window.localStorage.getItem(key);\n  const messages = await _initMessages(userId);\n\n  if (await _nullOrUndefined(deviceInfoPayload)) {\n    const registrationId = KeyHelper.generateRegistrationId();\n    const deviceId = await _randomInteger();\n    const keyId = 1; // should be random?\n    const store = new SignalProtocolStore();\n    await generateIdentity(store);\n\n    logger.info(\"Generate pre key bundle\");\n    const bundle = await generatePreKeyBundle(store, keyId, keyId);\n\n    logger.info(bundle);\n    return [registrationId, deviceId, keyId, store, messages, bundle];\n  } else {\n    const deviceInfo = JSON.parse(deviceInfoPayload);\n    switch(deviceInfo.version) {\n      case 1:\n        const payload = deviceInfo.payload;\n        const registrationId = payload.registrationId;\n        const deviceId = payload.deviceId;\n        const keyId = payload.preKeyId;\n        const store = new SignalProtocolStore();\n        store.put(\"registrationId\", payload.registrationId);\n        store.put(\"identityKey\", {pubKey: util.toArrayBuffer(payload.idPubKey), privKey: util.toArrayBuffer(payload.idPrivKey)});\n        store.storePreKey(keyId, {pubKey: util.toArrayBuffer(payload.preKeyPub), privKey: util.toArrayBuffer(payload.preKeyPriv)});\n        store.storeSignedPreKey(keyId, {pubKey: util.toArrayBuffer(payload.signedPreKeyPub), privKey: util.toArrayBuffer(payload.signedPreKeyPriv)});\n        const bundle = await getPreKeyBundle(store, keyId, keyId, util.toArrayBuffer(payload.signedSignature));\n\n        // restore the saved sessions\n        for(let key of Object.keys(payload.sessions)){\n          store.put(key, payload.sessions[key])\n        }\n\n        // restore the identity keys\n        for(let key of Object.keys(payload.identityKeys)){\n          store.put(key, payload.identityKeys[key])\n        }\n        return [registrationId, deviceId, keyId, store, messages, bundle];\n    }\n  }\n}\n\nasync function _savePreKeyBundleToAPI(bundle, apiChannel) {\n  logger.info(bundle);\n  let payload = {\n    \"payload\" : {\n      \"data\": {\n        \"type\": \"pre_key_bundle\",\n        \"attributes\": {\n          \"identity_key\": util.toString(bundle.identityKey),\n          \"registration_id\": bundle.registrationId,\n          \"pre_key_id\": bundle.preKey.keyId,\n          \"pre_key_public_key\": util.toString(bundle.preKey.publicKey || \"\"), // The public pre key gets wiped out after decoding a message, not sure why...\n          \"signed_pre_key_id\": bundle.signedPreKey.keyId,\n          \"signed_pre_key_public_key\": util.toString(bundle.signedPreKey.publicKey),\n          \"signed_pre_key_signature\": util.toString(bundle.signedPreKey.signature)\n        }\n      }\n    }\n  }\n\n  return _sendApiPush(apiChannel, \"POST:pre_key_bundles\", payload);\n}\n\nasync function _createNewInvitation(apiChannel, name, email){\n  let payload = {\n    \"payload\" : {\n      \"data\": {\n        \"type\": \"invitation\",\n        \"attributes\": {\n          \"name\": name,\n          \"email\": email\n        }\n      }\n    }\n  }\n\n  return _sendApiPush(apiChannel, \"POST:invitations\", payload);\n}\n\nasync function _sendMessage(message, apiChannel, preKeyBundle, devicePreKeyBundle){\n  let payload = {\n    \"payload\" : {\n      \"data\": {\n        \"type\": \"message\",\n        \"attributes\": {\n          \"type\": message.type,\n          \"body\": message.body,\n          \"pre_key_bundle_id\": preKeyBundle.id,\n          \"sender_pre_key_bundle_id\": devicePreKeyBundle.id\n        }\n      }\n    }\n  }\n\n  return _sendApiPush(apiChannel, \"POST:messages\", payload);\n}\n\nasync function _addressString(userId, deviceId) {\n  return `${userId}_${deviceId}`\n}\n\nasync function _searchIncludes(baseString, searchString) {\n  baseString = baseString || \"\";\n  baseString = baseString.toLowerCase();\n\n  return baseString.includes(searchString);\n}\n\nasync function _decryptMessage(store, deviceId, userId, payload) {\n  let addressString = await _addressString(userId, deviceId);\n  let address = new libsignal.SignalProtocolAddress(addressString, deviceId);\n  let sessionCipher = new libsignal.SessionCipher(store, address);\n  let hasSession = await _storeHasSession(store, addressString);\n  let encryptedMessage = payload.data[0].attributes;\n\n  let message = null;\n\n  logger.info(`Encrypted message body ${encryptedMessage.body}`)\n\n  if (encryptedMessage.type == 3) {\n    message = await sessionCipher.decryptPreKeyWhisperMessage(encryptedMessage.body, \"binary\")\n  } else {\n    message = await sessionCipher.decryptWhisperMessage(encryptedMessage.body, \"binary\")\n  }\n\n  return JSON.parse(util.toString(message));\n}\n\nasync function _displayMessageInUI() {\n  window.apiCallbacks.newMessage();\n}\n\nasync function _saveMessagesToMemory(userId, messages) {\n  const key = `ironMessages_${userId}`;\n  window.localStorage.setItem(key, JSON.stringify(messages));\n}\n\nasync function _saveSessionToMemory(session) {\n  const key = `ironUserSession`;\n  window.localStorage.setItem(key, JSON.stringify(session));\n}\n\nasync function _initUserSession() {\n  const key = `ironUserSession`;\n  const sessionPayload = window.localStorage.getItem(key);\n  if (sessionPayload) {\n    let session = JSON.parse(sessionPayload);\n    return [session.relationships.user.data.id, session.attributes.token];\n  } else {\n    return [null, null];\n  }\n}\n\nasync function _saveStateToMemory(store, bundle, keyId, deviceId, userId) {\n  const registrationId = await store.getLocalRegistrationId();\n  const idKeyPair = await store.getIdentityKeyPair();\n  const preKeyPair = await store.loadPreKey(keyId);\n  const signedPreKeyPair = await store.loadSignedPreKey(keyId);\n  const sig = await bundle.signedPreKey.signature;\n  const sessions = {};\n  const identityKeys = {};\n\n  for (let key of Object.keys(store.store)) {\n    // save the current sessions\n    if (key.startsWith(\"session\")){\n      sessions[key] = store.store[key];\n    }\n    // save the current identity keys\n    if (key.startsWith(\"identityKey\") && key != \"identityKey\"){\n      identityKeys[key] = store.store[key];\n    }\n  }\n\n  let storagePayload = {\n      registrationId: registrationId,\n      idPubKey: util.toString(idKeyPair.pubKey),\n      idPrivKey: util.toString(idKeyPair.privKey),\n      preKeyId: keyId,\n      signedKeyId: keyId,\n      deviceId: deviceId,\n      addressString: await _addressString(userId, deviceId),\n      signedPreKeyPub: util.toString(signedPreKeyPair.pubKey),\n      signedPreKeyPriv: util.toString(signedPreKeyPair.privKey),\n      signedSignature: util.toString(sig),\n      sessions: sessions,\n      identityKeys: identityKeys\n    };\n\n  if (preKeyPair && preKeyPair.pubKey) {\n    storagePayload.preKeyPub = util.toString(preKeyPair.pubKey)\n    storagePayload.preKeyPriv = util.toString(preKeyPair.privKey)\n  }\n\n  const ironStorage = {\n    version: 1,\n    payload: storagePayload\n  }\n  const key = `ironDeviceInfo_${userId}`;\n  window.localStorage.setItem(key, JSON.stringify(ironStorage));\n}\n\nlet Controller = (function() {\n  let [userId, userSessionToken] = [null, null];\n\n  let applicationState = {\n    state: {connectedUsers: [], messages: []},\n    insertObject: function(key, value) {\n      applicationState.state[`${key}_${value.id}`] = value;\n      const all = applicationState.state[`${key}`] || new Set([]);\n      applicationState.state[`${key}`] = all.add(value);\n    },\n    connectedUser: async function(user) {\n      const connections = Array.from(applicationState.state[`connections`] || new Set([]));\n      if(connections.some(function(connection){return _connected(connection, user, userId)})){\n        applicationState.state.connectedUsers.push(user);\n      }\n    }\n  };\n\n  window.applicationState = applicationState;\n\n  const clientVersion = \"0.0.1\"\n\n  let [registrationId, deviceId, keyId, bundle, devicePreKeyBundle] = [null, null, null, null, null, null];\n  let [socket, apiChannel, userDeviceChannel, loginChannel] = [null, null, null, null];\n  // Need to store on disk or something\n  let [store, messages] = [null, null];\n\n  let [apiChannelReady, userDeviceChannelReady, loginChannelReady] = [false, false, false];\n  let [failedToJoin] = [false];\n\n  async function _waitForApiChannel() {\n    while(true) {\n      if (apiChannelReady || failedToJoin) {\n        break;\n      } else {\n        await _sleep(10);\n      }\n    }\n  }\n\n  async function _waitForLoginChannel() {\n    while(true) {\n      if (loginChannelReady || failedToJoin) {\n        break;\n      } else {\n        await _sleep(10);\n      }\n    }\n  }\n\n  return {\n    asyncCall: async function() {\n      logger.info(\"Init\");\n\n      [userId, userSessionToken] = await _initUserSession();\n\n      await this.connectToServer();\n    },\n    inspectStore: async function() {\n      return store;\n    },\n    connectToAnonymous: async function() {\n    },\n    connectToServer: async function() {\n      logger.info(\"Connecting to server\");\n      [registrationId, deviceId, keyId, store, messages, bundle] = await _initState(userId);\n      logger.info(`Device id ${deviceId}`);\n      let url = `${wsProtocol}://${wsUrl}`;\n\n      if (Number.isInteger(wsPort)) {\n        url = url + `:${wsPort}`;\n      }\n\n      url = url + `/socket`;\n      socket = new Socket(url,\n        {\n          params: {\n            userId: userId,\n            sessionToken: userSessionToken,\n            clientVersion: clientVersion,\n            deviceId: deviceId\n          }\n        }\n      );\n      userDeviceChannel = socket.channel(`user:device:connect:${userId}:${deviceId}`, {})\n      apiChannel = socket.channel(\"api:connect\", {})\n      socket.connect();\n\n      apiChannel.join()\n        .receive(\"ok\", async resp => {\n          logger.info(\"Joined successfully\", resp);\n          logger.info(\"GET:pre_key_bundles\");\n          await _saveStateToMemory(store, bundle, keyId, deviceId, userId);\n          let response = await _savePreKeyBundleToAPI(bundle, apiChannel);\n          devicePreKeyBundle = response.payload.data[0];\n          apiChannelReady = true;\n\n          userDeviceChannel.join()\n            .receive(\"ok\", async resp => {\n              logger.info(\"Joined successfully\", resp);\n              userDeviceChannelReady = true;\n            })\n          .receive(\"error\", async resp => {\n            logger.info(\"Unable to join user\", resp)\n            failedToJoin = true;\n          })\n\n        })\n      .receive(\"error\", async resp => {\n        logger.info(\"Unable to join api\", resp)\n        failedToJoin = true;\n      })\n\n\n      loginChannel = socket.channel(\"login:connect\", {})\n\n      loginChannel.join()\n        .receive(\"ok\", async resp => {\n          logger.info(\"Login joined successfully\", resp);\n          loginChannelReady = true;\n        })\n      .receive(\"error\", async resp => { logger.info(\"Unable to join\", resp) })\n\n      userDeviceChannel.on(\"POST:messages\", async (response) => {\n        let encryptedMessage = response.payload.data[0]\n        let preKeyBundleId = encryptedMessage.relationships.sender_pre_key_bundle.data.id;\n\n        logger.info(`Got a message from ${preKeyBundleId}`);\n\n        let senderPreKeyBundle = await this.getPreKeyBundlesById(preKeyBundleId);\n        let senderDeviceId = senderPreKeyBundle.attributes.device_id;\n        let senderUserId = senderPreKeyBundle.relationships.user.data.id;\n\n        logger.info(`Got a message from device: ${senderDeviceId} user: ${senderUserId}`);\n\n        let message = await _decryptMessage(store, senderDeviceId, senderUserId, response.payload);\n\n        delete encryptedMessage.attributes.body\n        encryptedMessage.attributes.decryptedBody = message;\n\n        logger.info(`Decrypted message`);\n        logger.info(encryptedMessage);\n\n        await _saveStateToMemory(store, bundle, keyId, deviceId, userId);\n\n        messages.push(encryptedMessage);\n        await _saveMessagesToMemory(userId, messages);\n        await _displayMessageInUI();\n      });\n    },\n    getMessages: async function(connectedUserId) {\n      let connectedMessages = [];\n      for (let i = 0; i < messages.length; i++) {\n        let senderId = messages[i].relationships.sender.data.id;\n        let receiverId = messages[i].relationships.receiver.data.id;\n        if (senderId === connectedUserId.toString() || (senderId === userId.toString() && receiverId === connectedUserId.toString())) {\n          connectedMessages.push(messages[i]);\n        }\n      }\n\n      return connectedMessages;\n    },\n    currentUsersMessage: function (message) {\n      return (message.relationships.sender.data.id === userId.toString())\n    },\n    currentUser: async function(message) {\n      if (await this.notLoggedIn()) {\n        return null;\n      } else {\n        return this.getUserById(userId);\n      }\n    },\n    notLoggedIn: async function () {\n      await _waitForApiChannel();\n      return !!(socket) && failedToJoin\n    },\n    getUserById: async function(userId) {\n      await _waitForApiChannel();\n\n      let usersResp = await _sendApiPush(apiChannel, \"GET:users\", {id: userId});\n      let user = usersResp.payload.data[0];\n      applicationState.insertObject(\"users\", user)\n      applicationState.connectedUser(user);\n\n      return user;\n    },\n    updateUser: async function({name}) {\n      await _waitForApiChannel();\n      let payload = {\n        payload: {\n          data: {\n            type: \"user\",\n            attributes: {\n              name: name\n            }\n          }\n        }\n      }\n\n      const updateResp = await _sendApiPush(apiChannel, `PATCH:users:${userId}`, payload);\n      return updateResp;\n    },\n    getPreKeyBundlesByUserId: async function(userId) {\n      await _waitForApiChannel();\n      const preKeyBundlesResp = await _sendApiPush(apiChannel, \"GET:pre_key_bundles\", {\"user_id\": userId});\n      return preKeyBundlesResp.payload.data\n    },\n    getPreKeyBundlesById: async function(id) {\n      await _waitForApiChannel();\n      const preKeyBundlesResp = await _sendApiPush(apiChannel, \"GET:pre_key_bundles\", {\"id\": id});\n      return preKeyBundlesResp.payload.data[0]\n    },\n    sendVerificationCode: async function(email) {\n      await _waitForLoginChannel();\n      const verificationResp = await _sendApiPush(loginChannel, \"POST:email_verifications\", {email: email});\n      return verificationResp;\n    },\n    login: async function(email, code) {\n      await _waitForLoginChannel();\n      const loginResp = await _sendApiPush(loginChannel, \"POST:sessions\", {email: email, code: code});\n\n      if (loginResp.payload) {\n        _saveSessionToMemory(loginResp.payload.data.sessions[0]);\n      }\n\n      return loginResp;\n    },\n    getConnectedUsers: async function() {\n      await _waitForApiChannel();\n\n      const connectionsResp = await _sendApiPush(apiChannel, \"GET:connections\", {});\n\n      const connectedUsers = await Promise.all(connectionsResp.payload.data.map(async (connection) => {\n        applicationState.insertObject(\"connections\", connection)\n\n        let connectedUserId = connection.relationships.users.data[0].id == userId ? connection.relationships.users.data[1].id : connection.relationships.users.data[0].id;\n        const usersResp = await _sendApiPush(apiChannel, \"GET:users\", {\"id\": connectedUserId});\n        let usersById = await Promise.all(usersResp.payload.data.map((user) => {\n          applicationState.insertObject(\"users\", user)\n          applicationState.connectedUser(user);\n\n          return user;\n        }));\n        return usersById[0];\n      }));\n\n      return connectedUsers;\n    },\n    connectedUsersSearch: async function(searchString) {\n      let connectedUsers = await this.getConnectedUsers();\n      searchString = searchString.toLowerCase();\n      searchString = searchString.replace(/\\s+/g, \"\");\n\n      let searchResults = [];\n\n      for(let i = 0; i < connectedUsers.length; i++) {\n        let user = connectedUsers[i];\n\n        if (await _searchIncludes(user.attributes.name, searchString) || await _searchIncludes(user.attributes.email, searchString)) {\n          searchResults.push(user);\n        }\n      }\n\n      return searchResults;\n    },\n    createNewInvitation: async function(name, email) {\n      return _createNewInvitation(apiChannel, name, email);\n    },\n    sendMessage: async function(messageString, recipientUserId){\n      logger.info(`Sending message ${messageString} to ${recipientUserId}`);\n      const object = JSON.stringify({\"type\": \"message\", \"version\": \"1\", \"data\": messageString});\n      const messageBuffer = util.toArrayBuffer(object);\n      const preKeyBundles = await this.getPreKeyBundlesByUserId(recipientUserId);\n\n      let localMessage = await _normalizeLocalMessage(messageString, userId, recipientUserId, deviceId)\n      messages.push(localMessage);\n      await _saveMessagesToMemory(userId, messages);\n\n      for (let preKeyBundle of preKeyBundles) {\n        const bundleDeviceId = preKeyBundle.attributes.device_id\n        const addressString = await _addressString(recipientUserId, bundleDeviceId)\n        const address = new libsignal.SignalProtocolAddress(addressString, bundleDeviceId);\n        if (!await _storeHasSession(store, addressString, bundleDeviceId)) {\n          let sessionBuilder = new libsignal.SessionBuilder(store, address);\n          let result = await sessionBuilder.processPreKey({\n            registrationId: preKeyBundle.attributes.registration_id,\n            identityKey: util.toArrayBuffer(preKeyBundle.attributes.identity_key),\n            signedPreKey: {\n                keyId     : preKeyBundle.attributes.signed_pre_key_id,\n                publicKey : util.toArrayBuffer(preKeyBundle.attributes.signed_pre_key_public_key),\n                signature : util.toArrayBuffer(preKeyBundle.attributes.signed_pre_key_signature)\n            },\n            preKey: {\n                keyId     : preKeyBundle.attributes.pre_key_id,\n                publicKey : util.toArrayBuffer(preKeyBundle.attributes.pre_key_public_key)\n            }\n          });\n\n          await _saveStateToMemory(store, bundle, keyId, deviceId, userId);\n        }\n\n        let message = await _encryptMessage(store, address, messageString)\n        await _saveStateToMemory(store, bundle, keyId, deviceId, userId);\n        await _sendMessage(message, apiChannel, preKeyBundle, devicePreKeyBundle)\n      }\n    }\n  }\n})();\n\nmodule.exports.Controller = Controller;\n"]},"metadata":{},"sourceType":"module"}