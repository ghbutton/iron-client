{"ast":null,"code":"// vim: ts=4:sw=4:expandtab\nvar curve = require('./curve');\n\nvar nodeCrypto = require('crypto');\n\nfunction isNonNegativeInteger(n) {\n  return typeof n === 'number' && n % 1 === 0 && n >= 0;\n}\n\nexports.generateIdentityKeyPair = curve.generateKeyPair;\n\nexports.generateRegistrationId = function () {\n  var registrationId = Uint16Array.from(nodeCrypto.randomBytes(2))[0];\n  return registrationId & 0x3fff;\n};\n\nexports.generateSignedPreKey = function (identityKeyPair, signedKeyId) {\n  if (!(identityKeyPair.privKey instanceof Buffer) || identityKeyPair.privKey.byteLength != 32 || !(identityKeyPair.pubKey instanceof Buffer) || identityKeyPair.pubKey.byteLength != 33) {\n    throw new TypeError('Invalid argument for identityKeyPair');\n  }\n\n  if (!isNonNegativeInteger(signedKeyId)) {\n    throw new TypeError('Invalid argument for signedKeyId: ' + signedKeyId);\n  }\n\n  var keyPair = curve.generateKeyPair();\n  var sig = curve.calculateSignature(identityKeyPair.privKey, keyPair.pubKey);\n  return {\n    keyId: signedKeyId,\n    keyPair: keyPair,\n    signature: sig\n  };\n};\n\nexports.generatePreKey = function (keyId) {\n  if (!isNonNegativeInteger(keyId)) {\n    throw new TypeError('Invalid argument for keyId: ' + keyId);\n  }\n\n  var keyPair = curve.generateKeyPair();\n  return {\n    keyId: keyId,\n    keyPair: keyPair\n  };\n};","map":null,"metadata":{},"sourceType":"script"}